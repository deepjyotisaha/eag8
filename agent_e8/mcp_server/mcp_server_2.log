2025-04-28 23:13:28,387 - INFO -      _handle_request() Processing request of type CallToolRequest
2025-04-28 23:13:29,389 - INFO -              mcp_log() INFO: Replacing images with captions: A disciplined and structured approach to learning and implementing the fundamentals of AIML.

through bleeding edge concepts, and an amazing peer group to learn with.

Through ERA, EMLO and EPAi, TSAI has trained more than 7000 students! And now we have added EAG, a course dedicated to Agents, to this list!

This comprehensive 20-session course equips students to build advanced Agentic AI systems, capable of autonomous decision-making, task orchestration, and seamless interaction within complex web environments. Unlike traditional AI programs, this curriculum focuses on designing browser-based agents that leverage the latest advancements in LLMs, retrieval-augmented systems, and multi-agent collaboration, preparing students to lead the development of next-generation AI solutions.

Through hands-on experience with cutting-edge tools like SmolAgents, LangChain, OpenAI Evals, Selenium/Playwright, and retrieval-augmented frameworks (RAGs), students rapidly progress from foundational concepts to real-world applications. The course emphasizes creating end-to-end systems, where AI agents autonomously browse, retrieve, and reason across diverse web-based contexts, all while ensuring state management, error correction, and optimal performance.

From advanced prompt engineering and knowledge graphs to vision-based interaction and multi-modal AI systems, the curriculum is aligned with the latest trends in the industry. The capstone project challenges students to design and deploy a fully autonomous browser assistant, demonstrating their expertise in creating scalable and intelligent Agentic AI systems. Key features include: **Agentic Intelligence Focus, Modern Automation Toolsets, and Real-World Relevance**!

The EAG course offers a revolutionary approach to learning AI, enabling students to design agents that mirror human-like intelligence in interacting with the web, bridging the gap between theory and application.

EAG V2 will start in **August 2025**.

EAG V1/V2

| Lecture Title |
|---|

| Session 1: Foundations of the Transformer Architecture - A deep dive into the self-attention mechanism and why Transformers revolutionized NLP. |
| Session 2: Modern Language Model Internals - Examines pre-training objectives, parameter scaling, and advanced fine-tuning for LLMs. |
| Session 3: Introduction to Agentic AI - Overviews AI agents that plan, reason, and take actions beyond simple text generation. |
| Session 4: Planning and Reasoning with Language Models - Covers chain-of-thought prompting, multi-step reasoning, and structured thinking in LLMs. |
| Session 5: Agent Architecture – Cognitive Layers - Explores layered designs for perception, memory, and action to build robust AI agents. |
| Session 6: Memory, Context, and State Management - Focuses on methods (vector stores, retrieval-augmented generation) for handling extended context. |
| Session 7: Tool Use and External APIs - Shows how agents can call external tools or APIs (including Python scripts) to augment capabilities. |
| Session 8: Reinforcement Learning for Agentic Behaviors - Introduces RL frameworks that let agents learn and adapt through trial and error. |
| Session 9: Advanced Prompt Engineering & Auto-Prompting - Teaches sophisticated prompting tactics, sub-prompts, and self-improving prompt loops. |
| Session 10: Retrieval-Augmented and Knowledge-Graph Agents - Examines how external knowledge sources (search, databases, graphs) ground agent outputs. |
| Session 11: Understanding Browser Based Agents - Introduces AI-powered browser assistants and demonstrates their high-level architecture. |
| Session 12: Fundamentals of Web Page Parsing - Presents core HTML parsing, DOM traversal, and techniques to extract meaningful data from pages. |
| Session 13: Context Maintenance in Browsers - Shows how to persist and manage session data while browsing across multiple tabs/sites. |
| Session 14: Building Browser-Aware Agents - Covers leveraging browser-specific APIs to let agents navigate, click, and interact with pages. |
| Session 15: Introduction to Browser Automation Tools - Surveys Selenium, Puppeteer, and Playwright, focusing on bridging them with agentic frameworks. |
| Session 16: Intelligent Goal Interpretation - Explores designing agents that align web automation tasks with user-defined objectives. |
| Session 17: Multi-Agent Systems and Collaboration - Demonstrates how multiple agents can coordinate across different browser tasks or subtasks. |
| Session 18: Managing Uncertainty and Error Correction - Equips you with strategies for handling dynamic web structures, unexpected failures, and retries. |
| Session 19: Advanced Task Orchestration - Guides you through synchronizing tasks, tabs, and user interactions in real time. |
| Session 20: Capstone – (Probably) Autonomous Browser Assistant - Challenges you to design, build, and demo a fully functioning browser-based AI with advanced features. |

This revamped 30-session course transforms students into full-stack AI engineers, blending foundational knowledge with cutting-edge tools and practical deployment skills. Unlike the previous version, which focused on core theory, this new curriculum integrates MLOps, CI/CD, and end-to-end deployment across various platforms, ensuring students are equipped for real-world applications.

By leveraging modern coding tools like Cursor and Clade dev, students accelerate their development, gaining hands-on experience from day one. The course emphasizes parallel learning in frontend, backend, and AI modeling, ensuring students develop the comprehensive skill set required to deploy scalable AI solutions.

From neural networks and LLMs to generative AI and deployment strategies, the curriculum reflects the latest industry trends. The capstone project allows students to apply their knowledge in practical scenarios, demonstrating their readiness for the fast-evolving world of AI.

Key features include: a Full-Stack Focus; Modern Toolsets; and Real-World Relevance!

ERA V3 started on 12th October and scheduled to finish in July 2025! ERA V4 Classes are scheduled to start in July 2025.

ERA V3

| Lecture Title |
|---|

| Session 01: Introduction to AI, Neural Networks, and Development Tools |
| Session 02: Python Essentials, Version Control, and Web Development Basics |
| Session 03: Data Representation, Preprocessing, and UI Integration |
| Session 04: PyTorch Fundamentals and Simple Neural Networks |
| Session 05: Introduction to Deployment, CI/CD, and MLOps Basics |
| Session 06: Convolutional Neural Networks and Training on Cloud (CNNs) |
| Session 07: In-depth Coding Practice - CNNs |
| Session 08: Introduction to Transformers and Attention Mechanisms |
| Session 09: Advanced Neural Network Architectures |
| Session 10: Introduction to Large Language Models (LLMs) |
| Session 11: Data Augmentation and Preprocessing |
| Session 12: Advanced CI/CD, MLOps, and Deployment Practices |
| Session 13: Frontend Development for AI Applications |
| Session 14: Optimization Techniques and Efficient Training |
| Session 15: Visualization Techniques for CNNs and Transformers |
| Session 16: Generative Models: VAEs and GANs |
| Session 17: Stable Diffusion and Advanced Generative Techniques |
| Session 18: LLM Fine-Tuning and Optimization |
| Session 19: LLM Inference and Serving |
| Session 20: In-depth Coding Practice - LLMs |
| Session 21: LLM Agents and AI Assistants |
| Session 22: Multi-modal AI Models |
| Session 23: Retrieval-Augmented Generation (RAG) |
| Session 24: Advanced MLOps and Data Engineering |
| Session 25: Edge AI and Mobile Deployment |
| Session 26: Cloud Computing and Scalable AI |
| Session 27: In-depth Coding Practice - Scaling Up |
| Session 28: Reinforcement Learning Fundamentals |
| Session 29: End-to-End Project Deployment - A Hands-On |
| Session 30: Capstone Project Work |

ERA V2 (Old)

| Lecture Title |
|---|

| Session 01: Fundamentals of AI |
| Session 02: Exploring Neural Network Architectures |
| Session 03: Git and Python Essentials |
| Session 04: Building the first neural networks |
| Session 05: Introduction to PyTorch |
| Session 06: Backpropagation and Advanced Architectures |
| Session 07: In-Depth Coding Practice |
| Session 08: Batch Normalization & Regularization |
| Session 09: Advanced Convolutions, Data Augmentation and visualization |
| Session 10: Residual Connections in CNNs and One Cycle Policy |
| Session 11: Class Activation Maps, LRs, and Optimizers |
| Session 12: PyTorch Lightning and AI Application Development |
| Session 13: Training and Scaling on AWS in budget! |
| Session 14: YOLO and Object Detection Techniques |
| Session 15: Introduction to Transformers - Part I |
| Session 16: Introduction to Transformers - Part II |
| Session 17: Transformer Architectures and how to speed them up |
| Session 18: BERT, GPT, and ViT |
| Session 19: UNETs, Variational AutoEncoders, and Applications |
| Session 20: CLIP Models and training them |
| Session 21: Generative Art and Stable Diffusion |
| Session 22: GPT and Beyond |
| Session 23: Training a Transformer from Scratch |
| Session 24: Reinforcement Learning Part I |
| Session 25: Reinforcement Learning Part II |
| Session 26: RLHF & DPO |
| Session 27: LoRA, Quantization, and Fine Tuning LLMs |
| Session 28: Training ChatGPT from Scratch |
| Session 29: Training Multimodel GPTs |
| Session 30: Capstone Project |

Download the full course syllabus here.

An advanced Python course for fundamental understanding of Python Language and the PyTorch library. Designed for those who want to become application and ML Architects.

This course is not for beginners. Take this sample test to see what you would be learning.

Registrations for V6 are scheduled in April 2025, subscribe here to be notified.

PHASE #1 - FUNCTIONAL PYTHON

| Lecture Title |
|---|

Basics: Python Type Hierarchy, Multi-line statements and strings, Variable Names, Conditionals, Functions, The While Loop, Break Continue and the Try Statement, The For Loop and Classes |
Object Mutability and Interning: Variables and Memory References, Garbage Collection, Dynamic vs static Typing, Variable Re-assignment, Object Mutability, Variable Equality, Everything is an Object and Python Interning |
Numeric Types I: Integers, Constructors, Bases, Rational Numbers, Floats, rounding, Coercing to Integers and equality |
Numeric Types II: Decimals, Decimal Operations, Decimal Performance, Complex Numbers, Booleans, Boolean Precedence and Comparison Operators |
Functional Parameters: Argument vs Parameter, Positional and keyword Arguments, Unpacking Iterables, Extended Unpacking, __*args_, Keyword Arguments, __**kwags_, Args and Kwargs together, Parameter Defaults and Application |
First Class Functions Part I: Lambda Expressions, Lambdas and Sorting, Functional Introspection, Callables, Map, Filter, Zip and List Comprehension |
First Class Functions Part II: List Comprehension, Reducing functions, Partial Functions, Operator Module, Docstrings and Annotations. |
Scopes and Closures: Global and Local Scopes, Nonlocal scopes, Closures, and Closure Applications |
Decorators: Decorators and Decorator applications (timers, logger, stacked decorators, memoization, decorator class and dispatching) |
Tuples and Named Tuples: Tuples, Tuples as data structures, named Tuples, DocStrings, and Application |
Modules, Packages and Namespaces: Module, Python Imports, importlib, import variants, reloading modules, __main__, packages, structuring, and namespaces |
fStrings, Timing Functions and Command Line Arguments: Dictionary Ordering, kwargs, tuples, fStrings, Timing Functions and Command Line Arguments |
Sequence Types I: Sequence Types, Mutable Sequence Types, List vs Tuples, Index Base and Slice Bounds, Copying Sequence and Slicing |
Sequence Types II and Advanced List Comprehension: Custom Sequences, In-place Concatenation and Repetition, Sorting Sequences, List Comprehensions + Small Project |
Iterables and Iterators: Iterating Collections, Iterators, Iterables, Cyclic Iterators, in-built Iterators, iter() function and iterator applications |
Generators and Iteration Tools: Yielding and Generator Functions, Generator Expressions, Yield From, Aggregators, Chaining and Teeing, Zipping and their applications |
Context Managers: Context Managers, Lasy Iterators, Generators and Context Managers, Nested Context Managers and their application |
Data Pipelines: Data Pipeline and application |

Phase #2 - OOPS & PYTORCH

| Lecture Title |
|---|

Hash Maps and Dictionaries: Associative Arrays, Hash Maps, Hash Functions, Dictionary Views, Handling Dictionaries and Custom Classes |
Sets and Serialized Dictionaries: Set Theory, Python Sets, Frozen Sets, and Set Applications, DefaultDict, OrderedDict, Counters and UserDict |
Serialization and Deserialization: Picking, JSON Serialization, Encoding and Decoding JSON, and Applications |
Classes Part I: Object and Classes, Attributes, Callables, Functional Attributes and Run-time attributes |
Classes Part II + DataClasses: Properties, Decorators, Read-Only Properties, Class and Static Methods, Scopes, Dataclasses and Application |
Polymorphism and Special Methods: Polymorhpism, __str__ and __repr__ methods, rich comparisons, hashing and equality, callables, and applications |
Single Inheritance: Single Inheritance, Object Class, Overriding, Extending, Delegation, Slots, and applications |
Descriptors: Descriptors, Getters and Setters, Instance Properties, Strong and Weak References, __set_name__ method, Proprty Lookup Resolution and application |
Enumerations and Exceptions: Enumerations, Aliases, Custom Enums, Python Exceptions, Handling and Raising Exceptions and creating custom exceptions |
Pytorch Basics I : Matrices, Tensors, Variables, Numpy and PyTorch inter-operability, Rank, Axes and Shapes |
PyTorch Basics II: Data and Dataloader, Forward Method, Training Loop and Training Pipeline |
PyTorch Intermediate I + Pytorch Internals:PyTorch Classes, Containers, Layers and Activations. PyTorch Internals or how Pytorch uses Advanced Python internally |
PyTorch Intermediate II: Distance and Basic Loss Functions, Utilities, Profiling Layers, MACs/FLOPs calculations and Memory Usage |
PyTorch Advanced I: Convolution Algorithm Implementation, Autograd Mechanics and Dynamic Computation Graph |
PyTorch Advanced II: Optimizers, Custom Dataloaders, Tensorboard Integration, Memory Management and Half Precision Training |
PyTorch Advanced III: Advanced Loss Functions for GAN, Kullback Lieber, Embeddings, Focal, IoU, Perceptual, CTC, Triplet and DICE |

Course Feedback

| Feedback from Phase 1 students moving to Phase 2 |
|---|

| Initially i thought it would be just like all other python course, i joined just thinking i might learn few things more.. but as session progressed i was like.. okay i dont know python.. amazing sessions and course content |
| A very in depth course and excellent concepts |
| I really liked the course content. I never learnt python in this much depth. Now I can say that I am a python developer 😊 |
| Slightly hectic, when it comes to assignment submission.More days(atleast week time should be given for assignment submission) |
| ONE OF THE BEST COURSE AT AFFORDABLE PRICE |
| Has helped me know about intricate things on python |
| Course content is good and in depth which makes it easy to understand for anyone |
| Seriously EPAi one of the best Intermediate Python Courses that I have taken up. In-depth Content, Fun-To-Do Assignments, what else do I need? |
| Honestly i learned a lot from this course.. Course contents are really good and covered in depth which i really liked. |
| It is really awesome course !!! Good in-depth sessions. |
| For me course really helped a lot. Got to learn many new things. |
| Course is well structure but would request for more time for the assignment submissions. Like other courses a week should be good in my opinion. |
| Excellent stuff |
| Very nice course I learned a lot |
| The course content is very well structured and assignments are also top notch |
| Excellent course |
| This course is extremely unique. Not surprised as it's from TSAI. My overall experience with TSAI has been amazing ever since. |
| Hits the very core foundation of important concepts |
| One of the best courses I have ever attended |
| Good course content, too fast pace, challenging assignments |
| Gives in depth knowledge about the design and working behaviour of python |
| Advanced course in python which teaches CI/CD as an extra practice. |
| It's very good |
| Its great course for Advance Pythons for AI |
| good platform to explore so many new concepts |
| In-depth understanding of python for writing optimized, error-free and modular codes. Creating our own packages and module. |
| Course content is good and touching the deep roots of python |
| The course is very useful for me, I have not seen a course with this good content online. |
| its beautiful |
| Awesome, worth it |
| I think it's a very exhaustive course and is really going to be useful for my career. |

Instructor Feedback

| Feedback from Phase 1 students moving to Phase 2 |
|---|

| ABOUT THE INSTRUCTOR |
| I joined because you were teaching |
| Take a bow |
| What can I say, he is the best person to teach this course |
| Too good |
| BEST I CAN SAY. ROHAN SHRAVAN IS MY NEW ROLE MODEL. I WISH HIM SUCCESS FOR HIS FUTURE PLANS. |
| PRO |
| Rohan is an amazing instructor and makes every attempt to clarify things |
| G.O.D |
| One of the best instructor and influencer i have seen in my life. |
| Fabulous. Please take some more courses like this - C++, Javascript. |
| When i think of Rohan, I see dedication, commitment and discipline. when i look back i see much change in me. Thank you very much Rohan. |
| Good as always |
| Instructor is awesome like always! |
| Class apart |
| good |
| Knowledgeable |
| Excellent |
| Knowledgeable |
| Awesome |
| Awesome |
| Good hardworking |
| Perfect |
| Good |
| Extremely knowledgeable and experienced. Honoured to have such a mentor |
| Knowledgeable, explains even the tiniest detail |
| Rohan is very very very knowledgeable. And more than that, he is an awesome and inspirational teacher. He knows the issues that the students might face and keep his content and hands on session based on these factors. |
| Man! No comments! |
| Perfect to describe in one word and easily one of the best teachers I have studied under in my life yet |
| expert in python |
| Good |
| One of the finest instructor from whom I have taken the course |
| He gives great insight into topic taken |
| Excellent & Has lot of passion & patience |
| He is well knowledge in the topics |
| Rohan has ability to deliver complex concepts in a nice and simple yet powerful way. |
| Rohan is awesome. |
| Rohan is exceptional. |
| cant get better |
| I don't think it can get better than Rohan. Its his humble nature and passion that he brings to each class that drives me. |

A cutting-edge course for mastering the art of managing and deploying machine learning models at scale.

This course is not for the beginners.

Registrations are closed now. For EMLO V5 (scheduled in July 2025), subscribe here to be notified.

EMLO 4.0

| Lecture Title |
|---|

| Session 1 - Introduction to MLOps: An overview of MLOps (Machine Learning Operations), covering the best practices and tools to manage, deploy, and maintain machine learning models in production. |
| Session 2 - Docker - I: A hands-on session on creating Docker containers from scratch and an introduction to Docker, the containerization platform, and its core concepts. |
| Session 3 - Docker - II: An introduction to Docker Compose, a tool for defining and running multi-container Docker applications, with a focus on deploying machine learning applications. |
| Session 4 - PyTorch Lightning - I: An overview of PyTorch Lightning, a PyTorch wrapper for high-performance training and deployment of deep learning models, and a project setup session using PyTorch Lightning. |
| Session 5 - PyTorch Lightning - II: Learn to build sophisticated ML projects effortlessly using PyTorch Lightning and Hydra, combining streamlined development with advanced functionality for seamless model creation and deployment. |
| Session 6 - Data Version Control (DVC): Data Version Control (DVC), a tool for managing machine learning data and models, including versioning, data and model management, and collaboration features. |
| Session 7 - Experiment Tracking & :yperparameter Optimization A session covering various experiment tracking tools such as Tensorboard, MLFlow and an overview of Hyperparameter Optimization techniques using Optuna and Bayesian Optimization. |
| Session 10 - AWS Crash Course: A session on AWS, covering EC2, S3, ECS, ECR, and Fargate, with a focus on deploying machine learning models on AWS. |
| Session 11 - Model Deployment w/ FastAPI: A hands-on session on deploying machine learning models using FastAPI, a modern, fast, web framework for building APIs. |
| Session 12 - Model Deployment w/ TorchServe: An introduction to TorchServe, a PyTorch model serving library, and a hands-on session on deploying machine learning models using TorchServe. |
| Session 13 - Kubernetes - I: This session provides an introduction to Kubernetes, a popular container orchestration platform, and its key concepts and components. |
| Session 14 - Kubernetes - II: In this session, participants will learn how to monitor and configure Kubernetes clusters for machine learning workloads. |
| Session 15 - Kubernetes - III: This session will cover introduction to EKS, Kubernetes Service on AWS, Deploying a FastAPI - PyTorch Kuberentes Service on EKS |
| Session 16 - Kubernetes - IV: This session covers EBS Volumes, ISTIO and KServe, learning to deploy pytorch models on KServe |
| Session 17 - Canary Deployment & Monitoring: This session covers how to deploy models with Canary Rollout Strategy while monitoring it on Prometheus and Grafana |
| Session 18 - Capstone: This session is a final project where participants will apply the knowledge gained throughout the course to develop and deploy an end-to-end MLOps pipeline. |

Download the full course syllabus here.

EVA was the most exhaustive and updated Deep Vision Program in the world! It was spread over three semester-style phases, each restricted by a qualifying exam. It has now been merged into ERA.

Phase #1

| Fundamentals of DNNs & Transformes |
|---|

1: Background & Basics: Machine Learning Intuition |
1.5: Python: Python 101 for Machine Learning (Handson [HO] 1) |
2: Neural Architecture: Convolutions, Pooling Operations & Channels |
2.5: PyTorch & Lightning: PyTorch 101 for Vision Machine Learning [HO2] |
3: First Neural Network: Kernels, Activations, and Layers |
4: Architectural Basics: Building blocks of DNNs |
5: Coding Drill Down: We go through 9 model iterations together, step-by-step to find the final architecture [HO3] |
6: Mathematical Foundation: For ML & Backpropagation [HO4] |
7: Advanced Convolutions & Augmentation: Introduction to Advanced Conv Concepts & Albumentations LIbrary |
8: RFs & Attention: RFs & Attention is all you need! |
9: Advanced Training & LRs: Class Activation Maps, Optimizers, LR Schedules, LR Finder & One Cycle Policy |
10: Super Convergence: Training Models at lightning speed [HO5] |
11: Transformers : Deepdive Coding into Transformers [HO6] |
12: ViT: Vision Transformers |
13: YOLO Part 1: Object Detection (Data Collection and Processing) |
14: YOLO Part 2: Training an Object Detector [HO7] |
15: Capstone: Your turn now! Qualifying Exam for Phase 2 |

Phase #2

| Phase #2 - Transformers & Stable Diffusion |
|---|

16: Transformers and Attention Refresher (HandsOn 8) |
17: Attention and its Types |
18: Vision Transformers Part 1 |
19: Vision Transformers - ViT Part 2 (HandsOn 9) |
20: Self-Distillation and Self-Supervised Vision Transformers |
21: Introduction to Embedding and Language Models |
22: Language Model via Transformers (HandsOn 10) |
23: Advanced Concepts in Training Transformers (HandsOn 11) |
24: Semantic Segmentation |
25: Generative Adversarial Networks (HandsOn 12) |
26: Variational AutoEncoders & Mathematics |
27: VAE, its types, and Training (HandsOn 13) |
28: CLIP & Other Advanced Training Concepts (HandsOn 14) |
29: Generative AI and Stable Diffusion |
30: Capstone Project |

Phase #3

| Phase #3 - Applications |
|---|

31: Model Quantization & Training Part 1 |
32: Model Quantization & Training Part 2 |
33: Optical Character Recognition |
34: Depth Estimation |
35: Image Deblurring, Denoising & Enhancement |
36: Image Super Resolution |
37: Video Super Resolution |
38: Pose Estimation |
39: Face Recognition |
40: Understanding Audio for DNNs |
41: Audio Classification & Noise Removal |
42: Speech Enhancement & Separation |
43: Automatic Speech Recognition |
44: Beam Search for STT & NLP |
45: Capstone Project Speech Stable Diffusion! |
Bottom Topics will soon be moved to another course on Reinforcement learning |
Reinforcement Learning Basics: Markov Decision Processes, Deterministic, and Stochastic Environments & Bellman Equation |
Q-Learning: Q-Learning, Plan vs Policy Networks, and Environment Models |
Deep Q-Learning & DeepTraffic: Custom Environments, OpenGym, Exploration vs Exploitation, and improvements to DQN |
Deep Reinforcement Learning: Policy Gradients, Dynamic Programming, Policy Evaluations, and Temporal Difference Learning |
Actor-Critic Models: Memory Structures, Gibbs Softmax, Eligibility Traces, and Polyak Averaging |
A3C Models: A3C, A3C optimizations, and implementation logic |
Deep Deterministic Policy Gradients: DDPG Background, Off-Policy Networks, Continuous Action Spaces, and Replay Buffers |
Twin Delayed DDPG Part 1: Clipped Double-Q Learning, Delayed Policy Updates, and Target Policy Smoothing |
Twin Delayed DDPG Part 2: Full TD3 implementation to make a robot walk, and solve a custom environment |
Autonomous Robotics Introduction: Introduction to ARI platform, and its control systems. Real Robot we mean! |
Sensor Fusion for Localization: Sensor fusion, depth estimation, and stereo imaging for robotic localization |
3D Environmental Reconstruction Part 1: Solving 3D mapping for static environment |
3D Environmental Reconstruction Part 2: Solving 3D mapping for dynamic (moving) objects in the static environment |
3D Environmental Reconstruction Part 3: Solving 3D mapping for dynamic objects in a dynamic environment |
Advanced Path planning, and Navigation: A*, and other Path planning, and algorithms |
EndGame: CapStone project to implement everything we learned |
| The later part of this course's topics are inspired from Udacity Nanodegree but only just the topics, not its contents. We would be implementing these on a real robot, without ROS, and using TD3, not DQN as in Udacity |

In our flagship NLP program, we had ditch RNN/LSTMS and other recurrent networks completely, and focused fully on Transformers. After covering the basics of Neural Networks, we focused on Attention is All you need then covering advanced transformers like BERT, BART, ending with Retrieval Augmented Generation.

The world since last year moved on, and so has END. END is now merged with ERA.

PHASE #1 - Transformers

| Lecture Title |
|---|

| Background and Basics of Modern NLP |
| From Embeddings to Language Models |
| Advanced Python for General Computing & NLP |
| PyTorch for NLP |
| RNNs are dead and their Renewed Relevance |
| GRUs, Seq2Seq and Attention Mechanism |
| HandsOn Training 1 |
| Deep NLP using Convolutions |
| HandsOn Training 2 |
| Attention and Memory in Deep NLP |
| HandsOn Training 3 |
| Transformers with Linear Attention |
| HandsOn Training 4 |
| GloVe, Memory Networks and Recap |
| Infinity Capstone Project |

Phase #2 - GPT

| Lecture Title |
|---|

| Transformers and Attention Mechanism - Overview |
| Reformer: the efficient transformer |
| Bi-Directional Transformers |
| Document Level Models & Contextual Representations |
| GPT1 & Models of Dialog |
| GPT1 Coding & Practice |
| Building and training GPT2 and BERT |
| GPT2 and BERT Coding & Practice |
| GPT3 Deep Dive: Part 1 Architecture & Preprocessing |
| GPT3 Deep Dive: Part 2 Training |
| GPT3 Coding & Practice 1 |
| GPT3 Coding & Practice 2 |
| GPT3 Coding & Practice 3 |
| Advanced NLP Over the Edge |
| Endgame Capstone Project |
2025-04-28 23:13:29,414 - INFO -              mcp_log() INFO: Extracted webpage: A disciplined and structured approach to learning and implementing the fundamentals of AIML.

through bleeding edge concepts, and an amazing peer group to learn with.

Through ERA, EMLO and EPAi, TSAI has trained more than 7000 students! And now we have added EAG, a course dedicated to Agents, to this list!

This comprehensive 20-session course equips students to build advanced Agentic AI systems, capable of autonomous decision-making, task orchestration, and seamless interaction within complex web environments. Unlike traditional AI programs, this curriculum focuses on designing browser-based agents that leverage the latest advancements in LLMs, retrieval-augmented systems, and multi-agent collaboration, preparing students to lead the development of next-generation AI solutions.

Through hands-on experience with cutting-edge tools like SmolAgents, LangChain, OpenAI Evals, Selenium/Playwright, and retrieval-augmented frameworks (RAGs), students rapidly progress from foundational concepts to real-world applications. The course emphasizes creating end-to-end systems, where AI agents autonomously browse, retrieve, and reason across diverse web-based contexts, all while ensuring state management, error correction, and optimal performance.

From advanced prompt engineering and knowledge graphs to vision-based interaction and multi-modal AI systems, the curriculum is aligned with the latest trends in the industry. The capstone project challenges students to design and deploy a fully autonomous browser assistant, demonstrating their expertise in creating scalable and intelligent Agentic AI systems. Key features include: **Agentic Intelligence Focus, Modern Automation Toolsets, and Real-World Relevance**!

The EAG course offers a revolutionary approach to learning AI, enabling students to design agents that mirror human-like intelligence in interacting with the web, bridging the gap between theory and application.

EAG V2 will start in **August 2025**.

EAG V1/V2

| Lecture Title |
|---|

| Session 1: Foundations of the Transformer Architecture - A deep dive into the self-attention mechanism and why Transformers revolutionized NLP. |
| Session 2: Modern Language Model Internals - Examines pre-training objectives, parameter scaling, and advanced fine-tuning for LLMs. |
| Session 3: Introduction to Agentic AI - Overviews AI agents that plan, reason, and take actions beyond simple text generation. |
| Session 4: Planning and Reasoning with Language Models - Covers chain-of-thought prompting, multi-step reasoning, and structured thinking in LLMs. |
| Session 5: Agent Architecture – Cognitive Layers - Explores layered designs for perception, memory, and action to build robust AI agents. |
| Session 6: Memory, Context, and State Management - Focuses on methods (vector stores, retrieval-augmented generation) for handling extended context. |
| Session 7: Tool Use and External APIs - Shows how agents can call external tools or APIs (including Python scripts) to augment capabilities. |
| Session 8: Reinforcement Learning for Agentic Behaviors - Introduces RL frameworks that let agents learn and adapt through trial and error. |
| Session 9: Advanced Prompt Engineering & Auto-Prompting - Teaches sophisticated prompting tactics, sub-prompts, and self-improving prompt loops. |
| Session 10: Retrieval-Augmented and Knowledge-Graph Agents - Examines how external knowledge sources (search, databases, graphs) ground agent outputs. |
| Session 11: Understanding Browser Based Agents - Introduces AI-powered browser assistants and demonstrates their high-level architecture. |
| Session 12: Fundamentals of Web Page Parsing - Presents core HTML parsing, DOM traversal, and techniques to extract meaningful data from pages. |
| Session 13: Context Maintenance in Browsers - Shows how to persist and manage session data while browsing across multiple tabs/sites. |
| Session 14: Building Browser-Aware Agents - Covers leveraging browser-specific APIs to let agents navigate, click, and interact with pages. |
| Session 15: Introduction to Browser Automation Tools - Surveys Selenium, Puppeteer, and Playwright, focusing on bridging them with agentic frameworks. |
| Session 16: Intelligent Goal Interpretation - Explores designing agents that align web automation tasks with user-defined objectives. |
| Session 17: Multi-Agent Systems and Collaboration - Demonstrates how multiple agents can coordinate across different browser tasks or subtasks. |
| Session 18: Managing Uncertainty and Error Correction - Equips you with strategies for handling dynamic web structures, unexpected failures, and retries. |
| Session 19: Advanced Task Orchestration - Guides you through synchronizing tasks, tabs, and user interactions in real time. |
| Session 20: Capstone – (Probably) Autonomous Browser Assistant - Challenges you to design, build, and demo a fully functioning browser-based AI with advanced features. |

This revamped 30-session course transforms students into full-stack AI engineers, blending foundational knowledge with cutting-edge tools and practical deployment skills. Unlike the previous version, which focused on core theory, this new curriculum integrates MLOps, CI/CD, and end-to-end deployment across various platforms, ensuring students are equipped for real-world applications.

By leveraging modern coding tools like Cursor and Clade dev, students accelerate their development, gaining hands-on experience from day one. The course emphasizes parallel learning in frontend, backend, and AI modeling, ensuring students develop the comprehensive skill set required to deploy scalable AI solutions.

From neural networks and LLMs to generative AI and deployment strategies, the curriculum reflects the latest industry trends. The capstone project allows students to apply their knowledge in practical scenarios, demonstrating their readiness for the fast-evolving world of AI.

Key features include: a Full-Stack Focus; Modern Toolsets; and Real-World Relevance!

ERA V3 started on 12th October and scheduled to finish in July 2025! ERA V4 Classes are scheduled to start in July 2025.

ERA V3

| Lecture Title |
|---|

| Session 01: Introduction to AI, Neural Networks, and Development Tools |
| Session 02: Python Essentials, Version Control, and Web Development Basics |
| Session 03: Data Representation, Preprocessing, and UI Integration |
| Session 04: PyTorch Fundamentals and Simple Neural Networks |
| Session 05: Introduction to Deployment, CI/CD, and MLOps Basics |
| Session 06: Convolutional Neural Networks and Training on Cloud (CNNs) |
| Session 07: In-depth Coding Practice - CNNs |
| Session 08: Introduction to Transformers and Attention Mechanisms |
| Session 09: Advanced Neural Network Architectures |
| Session 10: Introduction to Large Language Models (LLMs) |
| Session 11: Data Augmentation and Preprocessing |
| Session 12: Advanced CI/CD, MLOps, and Deployment Practices |
| Session 13: Frontend Development for AI Applications |
| Session 14: Optimization Techniques and Efficient Training |
| Session 15: Visualization Techniques for CNNs and Transformers |
| Session 16: Generative Models: VAEs and GANs |
| Session 17: Stable Diffusion and Advanced Generative Techniques |
| Session 18: LLM Fine-Tuning and Optimization |
| Session 19: LLM Inference and Serving |
| Session 20: In-depth Coding Practice - LLMs |
| Session 21: LLM Agents and AI Assistants |
| Session 22: Multi-modal AI Models |
| Session 23: Retrieval-Augmented Generation (RAG) |
| Session 24: Advanced MLOps and Data Engineering |
| Session 25: Edge AI and Mobile Deployment |
| Session 26: Cloud Computing and Scalable AI |
| Session 27: In-depth Coding Practice - Scaling Up |
| Session 28: Reinforcement Learning Fundamentals |
| Session 29: End-to-End Project Deployment - A Hands-On |
| Session 30: Capstone Project Work |

ERA V2 (Old)

| Lecture Title |
|---|

| Session 01: Fundamentals of AI |
| Session 02: Exploring Neural Network Architectures |
| Session 03: Git and Python Essentials |
| Session 04: Building the first neural networks |
| Session 05: Introduction to PyTorch |
| Session 06: Backpropagation and Advanced Architectures |
| Session 07: In-Depth Coding Practice |
| Session 08: Batch Normalization & Regularization |
| Session 09: Advanced Convolutions, Data Augmentation and visualization |
| Session 10: Residual Connections in CNNs and One Cycle Policy |
| Session 11: Class Activation Maps, LRs, and Optimizers |
| Session 12: PyTorch Lightning and AI Application Development |
| Session 13: Training and Scaling on AWS in budget! |
| Session 14: YOLO and Object Detection Techniques |
| Session 15: Introduction to Transformers - Part I |
| Session 16: Introduction to Transformers - Part II |
| Session 17: Transformer Architectures and how to speed them up |
| Session 18: BERT, GPT, and ViT |
| Session 19: UNETs, Variational AutoEncoders, and Applications |
| Session 20: CLIP Models and training them |
| Session 21: Generative Art and Stable Diffusion |
| Session 22: GPT and Beyond |
| Session 23: Training a Transformer from Scratch |
| Session 24: Reinforcement Learning Part I |
| Session 25: Reinforcement Learning Part II |
| Session 26: RLHF & DPO |
| Session 27: LoRA, Quantization, and Fine Tuning LLMs |
| Session 28: Training ChatGPT from Scratch |
| Session 29: Training Multimodel GPTs |
| Session 30: Capstone Project |

Download the full course syllabus here.

An advanced Python course for fundamental understanding of Python Language and the PyTorch library. Designed for those who want to become application and ML Architects.

This course is not for beginners. Take this sample test to see what you would be learning.

Registrations for V6 are scheduled in April 2025, subscribe here to be notified.

PHASE #1 - FUNCTIONAL PYTHON

| Lecture Title |
|---|

Basics: Python Type Hierarchy, Multi-line statements and strings, Variable Names, Conditionals, Functions, The While Loop, Break Continue and the Try Statement, The For Loop and Classes |
Object Mutability and Interning: Variables and Memory References, Garbage Collection, Dynamic vs static Typing, Variable Re-assignment, Object Mutability, Variable Equality, Everything is an Object and Python Interning |
Numeric Types I: Integers, Constructors, Bases, Rational Numbers, Floats, rounding, Coercing to Integers and equality |
Numeric Types II: Decimals, Decimal Operations, Decimal Performance, Complex Numbers, Booleans, Boolean Precedence and Comparison Operators |
Functional Parameters: Argument vs Parameter, Positional and keyword Arguments, Unpacking Iterables, Extended Unpacking, __*args_, Keyword Arguments, __**kwags_, Args and Kwargs together, Parameter Defaults and Application |
First Class Functions Part I: Lambda Expressions, Lambdas and Sorting, Functional Introspection, Callables, Map, Filter, Zip and List Comprehension |
First Class Functions Part II: List Comprehension, Reducing functions, Partial Functions, Operator Module, Docstrings and Annotations. |
Scopes and Closures: Global and Local Scopes, Nonlocal scopes, Closures, and Closure Applications |
Decorators: Decorators and Decorator applications (timers, logger, stacked decorators, memoization, decorator class and dispatching) |
Tuples and Named Tuples: Tuples, Tuples as data structures, named Tuples, DocStrings, and Application |
Modules, Packages and Namespaces: Module, Python Imports, importlib, import variants, reloading modules, __main__, packages, structuring, and namespaces |
fStrings, Timing Functions and Command Line Arguments: Dictionary Ordering, kwargs, tuples, fStrings, Timing Functions and Command Line Arguments |
Sequence Types I: Sequence Types, Mutable Sequence Types, List vs Tuples, Index Base and Slice Bounds, Copying Sequence and Slicing |
Sequence Types II and Advanced List Comprehension: Custom Sequences, In-place Concatenation and Repetition, Sorting Sequences, List Comprehensions + Small Project |
Iterables and Iterators: Iterating Collections, Iterators, Iterables, Cyclic Iterators, in-built Iterators, iter() function and iterator applications |
Generators and Iteration Tools: Yielding and Generator Functions, Generator Expressions, Yield From, Aggregators, Chaining and Teeing, Zipping and their applications |
Context Managers: Context Managers, Lasy Iterators, Generators and Context Managers, Nested Context Managers and their application |
Data Pipelines: Data Pipeline and application |

Phase #2 - OOPS & PYTORCH

| Lecture Title |
|---|

Hash Maps and Dictionaries: Associative Arrays, Hash Maps, Hash Functions, Dictionary Views, Handling Dictionaries and Custom Classes |
Sets and Serialized Dictionaries: Set Theory, Python Sets, Frozen Sets, and Set Applications, DefaultDict, OrderedDict, Counters and UserDict |
Serialization and Deserialization: Picking, JSON Serialization, Encoding and Decoding JSON, and Applications |
Classes Part I: Object and Classes, Attributes, Callables, Functional Attributes and Run-time attributes |
Classes Part II + DataClasses: Properties, Decorators, Read-Only Properties, Class and Static Methods, Scopes, Dataclasses and Application |
Polymorphism and Special Methods: Polymorhpism, __str__ and __repr__ methods, rich comparisons, hashing and equality, callables, and applications |
Single Inheritance: Single Inheritance, Object Class, Overriding, Extending, Delegation, Slots, and applications |
Descriptors: Descriptors, Getters and Setters, Instance Properties, Strong and Weak References, __set_name__ method, Proprty Lookup Resolution and application |
Enumerations and Exceptions: Enumerations, Aliases, Custom Enums, Python Exceptions, Handling and Raising Exceptions and creating custom exceptions |
Pytorch Basics I : Matrices, Tensors, Variables, Numpy and PyTorch inter-operability, Rank, Axes and Shapes |
PyTorch Basics II: Data and Dataloader, Forward Method, Training Loop and Training Pipeline |
PyTorch Intermediate I + Pytorch Internals:PyTorch Classes, Containers, Layers and Activations. PyTorch Internals or how Pytorch uses Advanced Python internally |
PyTorch Intermediate II: Distance and Basic Loss Functions, Utilities, Profiling Layers, MACs/FLOPs calculations and Memory Usage |
PyTorch Advanced I: Convolution Algorithm Implementation, Autograd Mechanics and Dynamic Computation Graph |
PyTorch Advanced II: Optimizers, Custom Dataloaders, Tensorboard Integration, Memory Management and Half Precision Training |
PyTorch Advanced III: Advanced Loss Functions for GAN, Kullback Lieber, Embeddings, Focal, IoU, Perceptual, CTC, Triplet and DICE |

Course Feedback

| Feedback from Phase 1 students moving to Phase 2 |
|---|

| Initially i thought it would be just like all other python course, i joined just thinking i might learn few things more.. but as session progressed i was like.. okay i dont know python.. amazing sessions and course content |
| A very in depth course and excellent concepts |
| I really liked the course content. I never learnt python in this much depth. Now I can say that I am a python developer 😊 |
| Slightly hectic, when it comes to assignment submission.More days(atleast week time should be given for assignment submission) |
| ONE OF THE BEST COURSE AT AFFORDABLE PRICE |
| Has helped me know about intricate things on python |
| Course content is good and in depth which makes it easy to understand for anyone |
| Seriously EPAi one of the best Intermediate Python Courses that I have taken up. In-depth Content, Fun-To-Do Assignments, what else do I need? |
| Honestly i learned a lot from this course.. Course contents are really good and covered in depth which i really liked. |
| It is really awesome course !!! Good in-depth sessions. |
| For me course really helped a lot. Got to learn many new things. |
| Course is well structure but would request for more time for the assignment submissions. Like other courses a week should be good in my opinion. |
| Excellent stuff |
| Very nice course I learned a lot |
| The course content is very well structured and assignments are also top notch |
| Excellent course |
| This course is extremely unique. Not surprised as it's from TSAI. My overall experience with TSAI has been amazing ever since. |
| Hits the very core foundation of important concepts |
| One of the best courses I have ever attended |
| Good course content, too fast pace, challenging assignments |
| Gives in depth knowledge about the design and working behaviour of python |
| Advanced course in python which teaches CI/CD as an extra practice. |
| It's very good |
| Its great course for Advance Pythons for AI |
| good platform to explore so many new concepts |
| In-depth understanding of python for writing optimized, error-free and modular codes. Creating our own packages and module. |
| Course content is good and touching the deep roots of python |
| The course is very useful for me, I have not seen a course with this good content online. |
| its beautiful |
| Awesome, worth it |
| I think it's a very exhaustive course and is really going to be useful for my career. |

Instructor Feedback

| Feedback from Phase 1 students moving to Phase 2 |
|---|

| ABOUT THE INSTRUCTOR |
| I joined because you were teaching |
| Take a bow |
| What can I say, he is the best person to teach this course |
| Too good |
| BEST I CAN SAY. ROHAN SHRAVAN IS MY NEW ROLE MODEL. I WISH HIM SUCCESS FOR HIS FUTURE PLANS. |
| PRO |
| Rohan is an amazing instructor and makes every attempt to clarify things |
| G.O.D |
| One of the best instructor and influencer i have seen in my life. |
| Fabulous. Please take some more courses like this - C++, Javascript. |
| When i think of Rohan, I see dedication, commitment and discipline. when i look back i see much change in me. Thank you very much Rohan. |
| Good as always |
| Instructor is awesome like always! |
| Class apart |
| good |
| Knowledgeable |
| Excellent |
| Knowledgeable |
| Awesome |
| Awesome |
| Good hardworking |
| Perfect |
| Good |
| Extremely knowledgeable and experienced. Honoured to have such a mentor |
| Knowledgeable, explains even the tiniest detail |
| Rohan is very very very knowledgeable. And more than that, he is an awesome and inspirational teacher. He knows the issues that the students might face and keep his content and hands on session based on these factors. |
| Man! No comments! |
| Perfect to describe in one word and easily one of the best teachers I have studied under in my life yet |
| expert in python |
| Good |
| One of the finest instructor from whom I have taken the course |
| He gives great insight into topic taken |
| Excellent & Has lot of passion & patience |
| He is well knowledge in the topics |
| Rohan has ability to deliver complex concepts in a nice and simple yet powerful way. |
| Rohan is awesome. |
| Rohan is exceptional. |
| cant get better |
| I don't think it can get better than Rohan. Its his humble nature and passion that he brings to each class that drives me. |

A cutting-edge course for mastering the art of managing and deploying machine learning models at scale.

This course is not for the beginners.

Registrations are closed now. For EMLO V5 (scheduled in July 2025), subscribe here to be notified.

EMLO 4.0

| Lecture Title |
|---|

| Session 1 - Introduction to MLOps: An overview of MLOps (Machine Learning Operations), covering the best practices and tools to manage, deploy, and maintain machine learning models in production. |
| Session 2 - Docker - I: A hands-on session on creating Docker containers from scratch and an introduction to Docker, the containerization platform, and its core concepts. |
| Session 3 - Docker - II: An introduction to Docker Compose, a tool for defining and running multi-container Docker applications, with a focus on deploying machine learning applications. |
| Session 4 - PyTorch Lightning - I: An overview of PyTorch Lightning, a PyTorch wrapper for high-performance training and deployment of deep learning models, and a project setup session using PyTorch Lightning. |
| Session 5 - PyTorch Lightning - II: Learn to build sophisticated ML projects effortlessly using PyTorch Lightning and Hydra, combining streamlined development with advanced functionality for seamless model creation and deployment. |
| Session 6 - Data Version Control (DVC): Data Version Control (DVC), a tool for managing machine learning data and models, including versioning, data and model management, and collaboration features. |
| Session 7 - Experiment Tracking & :yperparameter Optimization A session covering various experiment tracking tools such as Tensorboard, MLFlow and an overview of Hyperparameter Optimization techniques using Optuna and Bayesian Optimization. |
| Session 10 - AWS Crash Course: A session on AWS, covering EC2, S3, ECS, ECR, and Fargate, with a focus on deploying machine learning models on AWS. |
| Session 11 - Model Deployment w/ FastAPI: A hands-on session on deploying machine learning models using FastAPI, a modern, fast, web framework for building APIs. |
| Session 12 - Model Deployment w/ TorchServe: An introduction to TorchServe, a PyTorch model serving library, and a hands-on session on deploying machine learning models using TorchServe. |
| Session 13 - Kubernetes - I: This session provides an introduction to Kubernetes, a popular container orchestration platform, and its key concepts and components. |
| Session 14 - Kubernetes - II: In this session, participants will learn how to monitor and configure Kubernetes clusters for machine learning workloads. |
| Session 15 - Kubernetes - III: This session will cover introduction to EKS, Kubernetes Service on AWS, Deploying a FastAPI - PyTorch Kuberentes Service on EKS |
| Session 16 - Kubernetes - IV: This session covers EBS Volumes, ISTIO and KServe, learning to deploy pytorch models on KServe |
| Session 17 - Canary Deployment & Monitoring: This session covers how to deploy models with Canary Rollout Strategy while monitoring it on Prometheus and Grafana |
| Session 18 - Capstone: This session is a final project where participants will apply the knowledge gained throughout the course to develop and deploy an end-to-end MLOps pipeline. |

Download the full course syllabus here.

EVA was the most exhaustive and updated Deep Vision Program in the world! It was spread over three semester-style phases, each restricted by a qualifying exam. It has now been merged into ERA.

Phase #1

| Fundamentals of DNNs & Transformes |
|---|

1: Background & Basics: Machine Learning Intuition |
1.5: Python: Python 101 for Machine Learning (Handson [HO] 1) |
2: Neural Architecture: Convolutions, Pooling Operations & Channels |
2.5: PyTorch & Lightning: PyTorch 101 for Vision Machine Learning [HO2] |
3: First Neural Network: Kernels, Activations, and Layers |
4: Architectural Basics: Building blocks of DNNs |
5: Coding Drill Down: We go through 9 model iterations together, step-by-step to find the final architecture [HO3] |
6: Mathematical Foundation: For ML & Backpropagation [HO4] |
7: Advanced Convolutions & Augmentation: Introduction to Advanced Conv Concepts & Albumentations LIbrary |
8: RFs & Attention: RFs & Attention is all you need! |
9: Advanced Training & LRs: Class Activation Maps, Optimizers, LR Schedules, LR Finder & One Cycle Policy |
10: Super Convergence: Training Models at lightning speed [HO5] |
11: Transformers : Deepdive Coding into Transformers [HO6] |
12: ViT: Vision Transformers |
13: YOLO Part 1: Object Detection (Data Collection and Processing) |
14: YOLO Part 2: Training an Object Detector [HO7] |
15: Capstone: Your turn now! Qualifying Exam for Phase 2 |

Phase #2

| Phase #2 - Transformers & Stable Diffusion |
|---|

16: Transformers and Attention Refresher (HandsOn 8) |
17: Attention and its Types |
18: Vision Transformers Part 1 |
19: Vision Transformers - ViT Part 2 (HandsOn 9) |
20: Self-Distillation and Self-Supervised Vision Transformers |
21: Introduction to Embedding and Language Models |
22: Language Model via Transformers (HandsOn 10) |
23: Advanced Concepts in Training Transformers (HandsOn 11) |
24: Semantic Segmentation |
25: Generative Adversarial Networks (HandsOn 12) |
26: Variational AutoEncoders & Mathematics |
27: VAE, its types, and Training (HandsOn 13) |
28: CLIP & Other Advanced Training Concepts (HandsOn 14) |
29: Generative AI and Stable Diffusion |
30: Capstone Project |

Phase #3

| Phase #3 - Applications |
|---|

31: Model Quantization & Training Part 1 |
32: Model Quantization & Training Part 2 |
33: Optical Character Recognition |
34: Depth Estimation |
35: Image Deblurring, Denoising & Enhancement |
36: Image Super Resolution |
37: Video Super Resolution |
38: Pose Estimation |
39: Face Recognition |
40: Understanding Audio for DNNs |
41: Audio Classification & Noise Removal |
42: Speech Enhancement & Separation |
43: Automatic Speech Recognition |
44: Beam Search for STT & NLP |
45: Capstone Project Speech Stable Diffusion! |
Bottom Topics will soon be moved to another course on Reinforcement learning |
Reinforcement Learning Basics: Markov Decision Processes, Deterministic, and Stochastic Environments & Bellman Equation |
Q-Learning: Q-Learning, Plan vs Policy Networks, and Environment Models |
Deep Q-Learning & DeepTraffic: Custom Environments, OpenGym, Exploration vs Exploitation, and improvements to DQN |
Deep Reinforcement Learning: Policy Gradients, Dynamic Programming, Policy Evaluations, and Temporal Difference Learning |
Actor-Critic Models: Memory Structures, Gibbs Softmax, Eligibility Traces, and Polyak Averaging |
A3C Models: A3C, A3C optimizations, and implementation logic |
Deep Deterministic Policy Gradients: DDPG Background, Off-Policy Networks, Continuous Action Spaces, and Replay Buffers |
Twin Delayed DDPG Part 1: Clipped Double-Q Learning, Delayed Policy Updates, and Target Policy Smoothing |
Twin Delayed DDPG Part 2: Full TD3 implementation to make a robot walk, and solve a custom environment |
Autonomous Robotics Introduction: Introduction to ARI platform, and its control systems. Real Robot we mean! |
Sensor Fusion for Localization: Sensor fusion, depth estimation, and stereo imaging for robotic localization |
3D Environmental Reconstruction Part 1: Solving 3D mapping for static environment |
3D Environmental Reconstruction Part 2: Solving 3D mapping for dynamic (moving) objects in the static environment |
3D Environmental Reconstruction Part 3: Solving 3D mapping for dynamic objects in a dynamic environment |
Advanced Path planning, and Navigation: A*, and other Path planning, and algorithms |
EndGame: CapStone project to implement everything we learned |
| The later part of this course's topics are inspired from Udacity Nanodegree but only just the topics, not its contents. We would be implementing these on a real robot, without ROS, and using TD3, not DQN as in Udacity |

In our flagship NLP program, we had ditch RNN/LSTMS and other recurrent networks completely, and focused fully on Transformers. After covering the basics of Neural Networks, we focused on Attention is All you need then covering advanced transformers like BERT, BART, ending with Retrieval Augmented Generation.

The world since last year moved on, and so has END. END is now merged with ERA.

PHASE #1 - Transformers

| Lecture Title |
|---|

| Background and Basics of Modern NLP |
| From Embeddings to Language Models |
| Advanced Python for General Computing & NLP |
| PyTorch for NLP |
| RNNs are dead and their Renewed Relevance |
| GRUs, Seq2Seq and Attention Mechanism |
| HandsOn Training 1 |
| Deep NLP using Convolutions |
| HandsOn Training 2 |
| Attention and Memory in Deep NLP |
| HandsOn Training 3 |
| Transformers with Linear Attention |
| HandsOn Training 4 |
| GloVe, Memory Networks and Recap |
| Infinity Capstone Project |

Phase #2 - GPT

| Lecture Title |
|---|

| Transformers and Attention Mechanism - Overview |
| Reformer: the efficient transformer |
| Bi-Directional Transformers |
| Document Level Models & Contextual Representations |
| GPT1 & Models of Dialog |
| GPT1 Coding & Practice |
| Building and training GPT2 and BERT |
| GPT2 and BERT Coding & Practice |
| GPT3 Deep Dive: Part 1 Architecture & Preprocessing |
| GPT3 Deep Dive: Part 2 Training |
| GPT3 Coding & Practice 1 |
| GPT3 Coding & Practice 2 |
| GPT3 Coding & Practice 3 |
| Advanced NLP Over the Edge |
| Endgame Capstone Project |
2025-04-28 23:13:29,421 - INFO -              mcp_log() INFO: Completed Extraction of webpage
2025-04-28 23:13:29,422 - INFO -      _handle_message() Warning: PydanticDeprecatedSince211: Accessing the 'model_fields' attribute on the instance is deprecated. Instead, you should access this attribute from the model class. Deprecated in Pydantic V2.11 to be removed in V3.0.
2025-04-28 23:13:30,367 - INFO -              mcp_log() INFO: Indexing documents with unified RAG pipeline...
2025-04-28 23:13:30,369 - INFO -              mcp_log() INFO: Indexing documents from: C:\Users\dsaha\OneDrive - Microsoft\Documents\Personal\deep\study\artificial intelligence\eagv1\eag8\agent_e8\mcp_server\documents
2025-04-28 23:13:30,379 - INFO -              mcp_log() SKIP: Skipping unchanged file: cricket.txt
2025-04-28 23:13:30,381 - INFO -              mcp_log() SKIP: Skipping unchanged file: DELETE_IMAGES.pdf
2025-04-28 23:13:30,382 - INFO -              mcp_log() SKIP: Skipping unchanged file: dlf.md
2025-04-28 23:13:30,387 - INFO -              mcp_log() SKIP: Skipping unchanged file: DLF_13072023190044_BRSR.pdf
2025-04-28 23:13:30,388 - INFO -              mcp_log() SKIP: Skipping unchanged file: economic.md
2025-04-28 23:13:30,390 - INFO -              mcp_log() PROC: Processing: Experience Letter.docx
2025-04-28 23:13:30,462 - INFO -              mcp_log() INFO: Using MarkItDown fallback for Experience Letter.docx
2025-04-28 23:13:58,507 - INFO -              mcp_log() ERROR: Failed to process Experience Letter.docx: File conversion failed after 2 attempts:
 - DocxConverter threw BadZipFile with message: File is not a zip file
 - XlsConverter threw XLRDError with message: Can't find workbook in OLE2 compound document

2025-04-28 23:13:58,509 - INFO -              mcp_log() SKIP: Skipping unchanged file: How to use Canvas LMS.pdf
2025-04-28 23:13:58,515 - INFO -              mcp_log() SKIP: Skipping unchanged file: INVG67564.pdf
2025-04-28 23:13:58,515 - INFO -              mcp_log() SKIP: Skipping unchanged file: markitdown.md
2025-04-28 23:13:58,517 - INFO -              mcp_log() PROC: Processing: SAMPLE-Indian-Policies-and-Procedures-January-2023.docx
2025-04-28 23:13:58,584 - INFO -              mcp_log() INFO: Using MarkItDown fallback for SAMPLE-Indian-Policies-and-Procedures-January-2023.docx
2025-04-28 23:13:58,592 - INFO -              mcp_log() ERROR: Failed to process SAMPLE-Indian-Policies-and-Procedures-January-2023.docx: File conversion failed after 2 attempts:
 - DocxConverter threw BadZipFile with message: File is not a zip file
 - XlsConverter threw XLRDError with message: Can't find workbook in OLE2 compound document

2025-04-28 23:13:58,601 - INFO -              mcp_log() SKIP: Skipping unchanged file: Tesla_Motors_IP_Open_Innovation_and_the_Carbon_Crisis_-_Matthew_Rimmer.pdf
2025-04-28 23:13:58,601 - INFO -              mcp_log() INFO: Indexing documents completed.
